!    ' |\r|\n|\t'

    "IF"
    "ELSE"
    "WHILE"
    "DO"
    "CREATE"
    "FUNCTION"
    "USE"
    'X'
    'Y'
    '{'
    '}'
    ';'
    '='
    '=='
    '!='
    '<='
    '>='
    '>'
    '<'
    '\+'
    '\-'
    '/'
    '\*'
    ','
    '\('
    '\)'
    '#'
    '[A-Za-z_][A-Za-z0-9_]*'           Identifier
    '\'([^\']|\'\')*\''                String                                [* %match = %match.substr( 1, %match.length - 2 );
                                                                                %match = %match.replace( /''/g, "\'" );    *]
    '[0-9]+'                           Integer
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    Float
    ;

##

Program:  Program Stmt                                                       [* JXG.JessieCode.execute( %2 ); *]
        |
        ;

Stmt_List:     Stmt_List Stmt                                                [* %% = JXG.JessieCode.createNode('node_op', 'op_none', %1, %2 ); *]
        |
        ;

Param_List:    Param_List ',' Expression                                     [* %% = JXG.JessieCode.createNode('node_op', 'op_paramlst', %1, %3 ); *]
        | Expression                                                         [* %% = JXG.JessieCode.createNode('node_op', 'op_param', %1); *]
        ;
                                
Param_Def_List:Param_Def_List ',' Identifier                                 [* %% = JXG.JessieCode.createNode('node_op', 'op_paramdeflst', %1, %3 ); *]
        | Identifier                                                         [* %% = JXG.JessieCode.createNode('node_op', 'op_paramdef', %1); *]
        |
        ;

Stmt:          IF Expression Stmt                                            [* %% = JXG.JessieCode.createNode('node_op', 'op_if', %2, %3 ); *]
        | IF Expression Stmt ELSE Stmt                                       [* %% = JXG.JessieCode.createNode('node_op', 'op_if_else', %2, %3, %5 ); *]
        | WHILE Expression Stmt                                              [* %% = JXG.JessieCode.createNode('node_op', 'op_while', %2, %4 ); *]
        | DO Stmt WHILE Expression ';'                                       [* %% = JXG.JessieCode.createNode('node_op', 'op_for', %2, %4 ); *]
        | USE Identifier ';'                                                 [* %% = JXG.JessieCode.createNode('node_op', 'op_use', %2 ); *]
        | Identifier '=' Expression ';'                                      [* %% = JXG.JessieCode.createNode('node_op', 'op_assign', %1, %3 ); *]
        | Expression ';'                                                     [* %% = JXG.JessieCode.createNode('node_op', 'op_noassign', %1 ); *]
        | '{' Stmt_List '}'                                                  [* %% = %2; *]
        | ';'                                                                [* %% = JXG.JessieCode.createNode('node_op', 'op_none' ); *]
        ;
                
Expression:    Expression '==' AddSubExp                                     [* %% = JXG.JessieCode.createNode('node_op', 'op_equ', %1, %3 ); *]
        | Expression '<' AddSubExp                                           [* %% = JXG.JessieCode.createNode('node_op', 'op_lot', %1, %3 ); *]
        | Expression '>' AddSubExp                                           [* %% = JXG.JessieCode.createNode('node_op', 'op_grt', %1, %3 ); *]
        | Expression '<=' AddSubExp                                          [* %% = JXG.JessieCode.createNode('node_op', 'op_loe', %1, %3 ); *]
        | Expression '>=' AddSubExp                                          [* %% = JXG.JessieCode.createNode('node_op', 'op_gre', %1, %3 ); *]
        | Expression '!=' AddSubExp                                          [* %% = JXG.JessieCode.createNode('node_op', 'op_neq', %1, %3 ); *]
        | AddSubExp
        ;

AddSubExp:    AddSubExp '-' MulDivExp                                        [* %% = JXG.JessieCode.createNode('node_op', 'op_sub', %1, %3 ); *]
        | AddSubExp '+' MulDivExp                                            [* %% = JXG.JessieCode.createNode('node_op', 'op_add', %1, %3 ); *]
        | MulDivExp
        ;
                
MulDivExp:    MulDivExp '*' NegExp                                           [* %% = JXG.JessieCode.createNode('node_op', 'op_mul', %1, %3 ); *]
        | MulDivExp '/' NegExp                                               [* %% = JXG.JessieCode.createNode('node_op', 'op_div', %1, %3 ); *]
        | NegExp
        ;
                
NegExp:        '-' Value                                                     [* %% = JXG.JessieCode.createNode('node_op', 'op_neg', %2 ); *]
        | Value
        ;


Value:        Integer                                                        [* %% = JXG.JessieCode.createNode('node_const', %1 ); *]
        | Float                                                              [* %% = JXG.JessieCode.createNode('node_const', %1 ); *]
        | Identifier                                                         [* %% = JXG.JessieCode.createNode('node_var', %1 ); *]
        | '(' Expression ')'                                                 [* %% = %2; *]
        | String                                                             [* %% = JXG.JessieCode.createNode('node_str', %1); *]
        | CREATE '(' Param_List ')'                                          [* %% = JXG.JessieCode.createNode('node_op', 'op_create', %3 ); *]
        | Identifier '(' Param_List ')'                                      [* %% = JXG.JessieCode.createNode('node_op', 'op_execfun', %1, %3); *]
        | FUNCTION '(' Param_Def_List ')' '{' Stmt_List '}'                  [* %% = JXG.JessieCode.createNode('node_op', 'op_function', %3, %6); *]
        | X '(' Identifier ')'                                               [* %% = JXG.JessieCode.createNode('node_method', 'x', %3); *]
        | Y '(' Identifier ')'                                               [* %% = JXG.JessieCode.createNode('node_method', 'y', %3); *]
        ;

