/~ ----------------------------------------------------------------- ~/
/~  Grammar definition of JessieCode                                 ~/
/~ ----------------------------------------------------------------- ~/
/~                                                                   ~/
/~ Copyright 2011-2013                                               ~/
/~   Michael Gerhaeuser,                                             ~/
/~   Alfred Wassermann                                               ~/
/~                                                                   ~/
/~ JessieCode is free software dual licensed under the GNU LGPL or   ~/
/~ MIT License.                                                      ~/
/~                                                                   ~/
/~ You can redistribute it and/or modify it under the terms of the   ~/
/~                                                                   ~/
/~  * GNU Lesser General Public License as published by              ~/
/~    the Free Software Foundation, either version 3 of the License, ~/
/~    or (at your option) any later version                          ~/
/~  OR                                                               ~/
/~  * MIT License:                                                   ~/
/~    https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT   ~/
/~                                                                   ~/
/~ JessieCode is distributed in the hope that it will be useful,     ~/
/~ but WITHOUT ANY WARRANTY; without even the implied warranty of    ~/
/~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     ~/
/~ GNU Lesser General Public License for more details.               ~/
/~                                                                   ~/
/~ You should have received a copy of the GNU Lesser General Public  ~/
/~ License and the MIT License along with JessieCode. If not, see    ~/
/~ <http://www.gnu.org/licenses/> and                                ~/
/~ <http://opensource.org/licenses/MIT/>.                            ~/
/~                                                                   ~/
/~ ----------------------------------------------------------------- ~/

/~ Ignored tokens ~/
!    ' |\r|\n|\t';


/~ The following token definitions are grouped by precedence and     ~/
/~ associativity. Every group is preceded by a comment that          ~/
/~ describes the precedence group, associativity and type of the     ~/
/~ following group (in that order).                                  ~/


/~ prec 1 / ltr / member access ~/
<   '\.'
    '\['
    '\]';

/~ prec 2 / ltr / function call ~/
<   '\('
    '\)';

/~ prec 3 / rtl / unary logical ~/
>   '!';

/~ prec 4 / rtl / exponentiation ~/
>   '^';

/~ prec 5 / ltr / multiplication arithmetic ~/
<   '\*'
    '/'
    '%';

/~ prec 6 / ltr / addition arithmetic ~/
<   '+'
    '-';

/~ prec 7 / ltr / relational ~/
<   '<='
    '<'
    '>='
    '>';

/~ prec 8 / ltr / equality ~/
<   '=='
    '~='
    '!=';

/~ prec 9 / ltr / logical and ~/
<   '&&';

/~ prec 10 / ltr / logical or ~/
<   '\|\|';

/~ prec 11 / rtl / assignment ~/
>   '=';

/~ prec 12 / ltr / comma ~/
<   ',';

/~ non-associative tokens ~/
    "IF"
    "ELSE"
    "WHILE"
    "DO"
    "FOR"
    "FUNCTION"
    "USE"
    "RETURN"
    "DELETE"
    "TRUE"
    "FALSE"
    '<<'
    '>>'
    '{'
    '}'
    ';'
    '#'
/~ the following two are not non-associative ~/
    '\?'
    '\:'
    'NaN'
    '[A-Za-z_\$][A-Za-z0-9_]*'         Identifier
    '\'([^\']|\\\')*\''                String                                [*%match = %match.substr(1, %match.length - 2);
                    %match = %match.replace(/\\\'/g, "\'");*]
    '[0-9]+'                           Integer
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    Float
    ;

##

Program:  Program Stmt                                                       [*    this.execute(%2);*]
        |
        ;

Stmt_List:     Stmt_List Stmt                                                [*%% = this.createNode('node_op', 'op_none', %1, %2);*]
        |
        ;

Param_List:    Param_List ',' Expression                                     [*%% = this.createNode('node_op', 'op_param', %3, %1);*]
        | Expression                                                         [*%% = this.createNode('node_op', 'op_param', %1);*]
        |
        ;

Prop_List:     Prop_List ',' Prop                                            [*%% = this.createNode('node_op', 'op_proplst', %1, %3);*]
        | Prop
        |
        ;

Prop:          Identifier ':' Expression                                     [*%% = this.createNode('node_op', 'op_prop', %1, %3);*]
        ;

Param_Def_List:Param_Def_List ',' Identifier                                 [*%% = this.createNode('node_op', 'op_paramdef', %3, %1);*]
        | Identifier                                                         [*%% = this.createNode('node_op', 'op_paramdef', %1);*]
        |
        ;

Attr_List:    Attr_List ',' ExtValue                                         [*%% = this.createNode('node_op', 'op_param', %3, %1);*]
        | ExtValue                                                           [*%% = this.createNode('node_op', 'op_param', %1);*]
        ;

Assign:       Lhs '=' Expression                                             [*%% = this.createNode('node_op', 'op_assign', %1, %3);*]
        ;

Stmt:          IF Expression Stmt                                            [*%% = this.createNode('node_op', 'op_if', %2, %3);*]
        | IF Expression Stmt ELSE Stmt                                       [*%% = this.createNode('node_op', 'op_if_else', %2, %3, %5);*]
        | WHILE Expression Stmt                                              [*%% = this.createNode('node_op', 'op_while', %2, %3);*]
        | DO Stmt WHILE Expression ';'                                       [*%% = this.createNode('node_op', 'op_do', %2, %4);*]
        | FOR '(' Assign ';' Expression ';' Assign ')' Stmt                  [*%% = this.createNode('node_op', 'op_for', %3, %5, %7, %9);*]
        | USE Identifier ';'                                                 [*%% = this.createNode('node_op', 'op_use', %2);*]
        | DELETE Identifier                                                  [*%% = this.createNode('node_op', 'op_delete', %2);*]
        | RETURN Stmt                                                        [*%% = this.createNode('node_op', 'op_return', %2);*]
        | Assign ';'
        | Expression ';'                                                     [*%% = this.createNode('node_op', 'op_noassign', %1);*]
        | '{' Stmt_List '}'                                                  [*%% = %2;
                    %%.needsBrackets = true;*]
        | ';'                                                                [*%% = this.createNode('node_op', 'op_none');*]
        ;

Lhs:          ExtValue '.' Identifier                                        [*%% = this.createNode('node_op', 'op_lhs', %3, %1, 'dot');*]
        | ExtValue '[' AddSubExp ']'                                         [*%% = this.createNode('node_op', 'op_lhs', %3, %1, 'bracket');*]
        | Identifier                                                         [*%% = this.createNode('node_op', 'op_lhs', %1);*]
        ;

Expression:       LogExp '||' CmpExp                                          [*%% = this.createNode('node_op', 'op_or', %1, %3);*]
        | LogExp '&&' CmpExp                                              [*%% = this.createNode('node_op', 'op_and', %1, %3);*]
        | '!' LogExp                                                         [*%% = this.createNode('node_op', 'op_not', %2);*]
        | CmpExp
        ;

CmpExp:    CmpExp '==' AddSubExp                                        [*%% = this.createNode('node_op', 'op_equ', %1, %3);*]
        | CmpExp '<' AddSubExp                                              [*%% = this.createNode('node_op', 'op_lot', %1, %3);*]
        | CmpExp '>' AddSubExp                                              [*%% = this.createNode('node_op', 'op_grt', %1, %3);*]
        | CmpExp '<=' AddSubExp                                             [*%% = this.createNode('node_op', 'op_loe', %1, %3);*]
        | CmpExp '>=' AddSubExp                                             [*%% = this.createNode('node_op', 'op_gre', %1, %3);*]
        | CmpExp '!=' AddSubExp                                             [*%% = this.createNode('node_op', 'op_neq', %1, %3);*]
        | CmpExp '~=' AddSubExp                                             [*%% = this.createNode('node_op', 'op_approx', %1, %3);*]
        | CmpExp '?' Value ':' Value                                     [*%% = this.createNode('node_op', 'op_conditional', %1, %3, %5);*]
        | AddSubExp
        ;

AddSubExp:    AddSubExp '-' MulDivExp                                        [*%% = this.createNode('node_op', 'op_sub', %1, %3);*]
        | AddSubExp '+' MulDivExp                                            [*%% = this.createNode('node_op', 'op_add', %1, %3);*]
        | MulDivExp
        ;

MulDivExp:    MulDivExp '*' NegExp                                           [*%% = this.createNode('node_op', 'op_mul', %1, %3);*]
        | MulDivExp '/' NegExp                                               [*%% = this.createNode('node_op', 'op_div', %1, %3);*]
        | MulDivExp '%' NegExp                                               [*%% = this.createNode('node_op', 'op_mod', %1, %3);*]
        | NegExp
        ;

ExpExp:      ExtValue '^' ExpExp                                               [*%% = this.createNode('node_op', 'op_exp', %1, %3);*]
        | ExtValue
        ;

NegExp:        '-' ExpExp                                                  [*%% = this.createNode('node_op', 'op_neg', %2);*]
        | '+' ExpExp                                                       [*%% = %2;*]
        | ExpExp
        ;

ExtValue:      ExtValue '[' AddSubExp ']'                                    [*%% = this.createNode('node_op', 'op_extvalue', %1, %3);*]
        | ExtValue '(' Param_List ')' '[' AddSubExp ']'                      [*%% = this.createNode('node_op', 'op_extvalue', this.createNode('node_op', 'op_execfun', %1, %3), %6);*]
        | ExtValue '(' Param_List ')'                                        [*%% = this.createNode('node_op', 'op_execfun', %1, %3);*]
        | ExtValue '(' Param_List ')' Attr_List                              [*%% = this.createNode('node_op', 'op_execfun', %1, %3, %5, true);*]
        | ExtValue '.' Identifier                                            [*%% = this.createNode('node_op', 'op_property', %1, %3);*]
        | Value
        ;

Value:        Integer                                                        [*%% = this.createNode('node_const', %1);*]
        | Float                                                              [*%% = this.createNode('node_const', %1);*]
        | Identifier                                                         [*%% = this.createNode('node_var', %1);*]
        | '(' Expression ')'                                                 [*%% = %2;*]
        | String                                                             [*%% = this.createNode('node_str', %1);*]
        | FUNCTION '(' Param_Def_List ')' '{' Stmt_List '}'                  [*%% = this.createNode('node_op', 'op_function', %3, %6);*]
        | '<<' Prop_List '>>'                                                [*%% = this.createNode('node_op', 'op_proplst_val', %2);*]
        | '[' Param_List ']'                                                 [*%% = this.createNode('node_op', 'op_array', %2);*]
        | TRUE                                                               [*%% = this.createNode('node_const_bool', %1);*]
        | FALSE                                                              [*%% = this.createNode('node_const_bool', %1);*]
        | NaN                                                                [*%% = this.createNode('node_const', NaN);*]
        ;

