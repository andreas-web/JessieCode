/~ ----------------------------------------------------------------- ~/
/~  Grammar definition of JessieCode                                 ~/
/~ ----------------------------------------------------------------- ~/
/~  Copyright 2011-2012                                              ~/
/~    Michael Gerh√§user                                              ~/
/~    Alfred Wassermann                                              ~/
/~                                                                   ~/
/~  Licensed under the LGPL v3                                       ~/
/~ ----------------------------------------------------------------- ~/

!    ' |\r|\n|\t'

    "IF"
    "ELSE"
    "WHILE"
    "DO"
    "FOR"
    "FUNCTION"
    "USE"
    "RETURN"
    "DELETE"
    "TRUE"
    "FALSE"
    '<<'
    '>>'
    '\['
    '\]'
    '{'
    '}'
    ';'
    '='
    '=='
    '!='
    '~='
    '<='
    '>='
    '>'
    '<'
    '\|\|'
    '&&'
    '!'
    '\+'
    '\-'
    '/'
    '%'
    '\*'
    '^'
    '\('
    '\)'
    ','
    '#'
    '\:'
    '\|'
    '\.'
    '[A-Za-z_\$][A-Za-z0-9_]*'         Identifier
    '\'([^\']|\\\')*\''                String                                [* %match = %match.substr( 1, %match.length - 2 );
                                                                                %match = %match.replace( /\\\'/g, "\'" );    *]
    '[0-9]+'                           Integer
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    Float
    ;

##

Program:  Program Stmt                                                       [* this.execute( %2 ); *]
        |
        ;

Stmt_List:     Stmt_List Stmt                                                [* %% = this.createNode('node_op', 'op_none', %1, %2 ); *]
        |
        ;

Param_List:    Param_List ',' Expression                                     [* %% = this.createNode('node_op', 'op_param', %3, %1 ); *]
        | Expression                                                         [* %% = this.createNode('node_op', 'op_param', %1); *]
        |
        ;

Prop_List:     Prop_List ',' Prop                                            [* %% = this.createNode('node_op', 'op_proplst', %1, %3 ); *]
        | Prop
        |
        ;

Prop:          Identifier ':' Expression                                     [* %% = this.createNode('node_op', 'op_prop', %1, %3 ); *]
        ;
                                
Param_Def_List:Param_Def_List ',' Identifier                                 [* %% = this.createNode('node_op', 'op_paramdef', %3, %1); *]
        | Identifier                                                         [* %% = this.createNode('node_op', 'op_paramdef', %1); *]
        |
        ;

Assign:       Lhs '=' Expression                                             [* %% = this.createNode('node_op', 'op_assign', %1, %3 ); *]
        ;

Stmt:          IF Expression Stmt                                            [* %% = this.createNode('node_op', 'op_if', %2, %3 ); *]
        | IF Expression Stmt ELSE Stmt                                       [* %% = this.createNode('node_op', 'op_if_else', %2, %3, %5 ); *]
        | WHILE Expression Stmt                                              [* %% = this.createNode('node_op', 'op_while', %2, %4 ); *]
        | DO Stmt WHILE Expression ';'                                       [* %% = this.createNode('node_op', 'op_do', %2, %4 ); *]
        | FOR '(' Assign ';' Expression ';' Assign ')' Stmt                  [* %% = this.createNode('node_op', 'op_for', %3, %5, %7, %9); *]
        | USE Identifier ';'                                                 [* %% = this.createNode('node_op', 'op_use', %2 ); *]
        | DELETE Identifier                                                  [* %% = this.createNode('node_op', 'op_delete', %2); *]
        | RETURN Stmt                                                        [* %% = this.createNode('node_op', 'op_return', %2 ); *]
        | Assign ';'
        | Expression ';'                                                     [* %% = this.createNode('node_op', 'op_noassign', %1 ); *]
        | '{' Stmt_List '}'                                                  [* %% = %2; %%.needsBrackets = true; *]
        | ';'                                                                [* %% = this.createNode('node_op', 'op_none' ); *]
        ;

Lhs:          ExtValue '.' Identifier                                        [* %% = this.createNode('node_op', 'op_lhs', %3, %1, 'dot'); *]
        | ExtValue '[' AddSubExp ']'                                         [* %% = this.createNode('node_op', 'op_lhs', %3, %1, 'bracket'); *]
        | Identifier                                                         [* %% = this.createNode('node_op', 'op_lhs', %1); *]
        ;
                
Expression:    Expression '==' LogExp                                        [* %% = this.createNode('node_op', 'op_equ', %1, %3 ); *]
        | Expression '<' LogExp                                              [* %% = this.createNode('node_op', 'op_lot', %1, %3 ); *]
        | Expression '>' LogExp                                              [* %% = this.createNode('node_op', 'op_grt', %1, %3 ); *]
        | Expression '<=' LogExp                                             [* %% = this.createNode('node_op', 'op_loe', %1, %3 ); *]
        | Expression '>=' LogExp                                             [* %% = this.createNode('node_op', 'op_gre', %1, %3 ); *]
        | Expression '!=' LogExp                                             [* %% = this.createNode('node_op', 'op_neq', %1, %3 ); *]
        | Expression '~=' LogExp                                             [* %% = this.createNode('node_op', 'op_approx', %1, %3 ); *]
        | LogExp
        ;

LogExp:       LogExp '||' AddSubExp                                          [* %% = this.createNode('node_op', 'op_or', %1, %3); *]
        | LogExp '&&' AddSubExp                                              [* %% = this.createNode('node_op', 'op_and', %1, %3); *]
        | '!' LogExp                                                         [* %% = this.createNode('node_op', 'op_not', %2); *]
        | AddSubExp
        ;

AddSubExp:    AddSubExp '-' MulDivExp                                        [* %% = this.createNode('node_op', 'op_sub', %1, %3 ); *]
        | AddSubExp '+' MulDivExp                                            [* %% = this.createNode('node_op', 'op_add', %1, %3 ); *]
        | MulDivExp
        ;
                
MulDivExp:    MulDivExp '*' ExpExp                                           [* %% = this.createNode('node_op', 'op_mul', %1, %3 ); *]
        | MulDivExp '/' ExpExp                                               [* %% = this.createNode('node_op', 'op_div', %1, %3 ); *]
        | MulDivExp '%' ExpExp                                               [* %% = this.createNode('node_op', 'op_mod', %1, %3 ); *]
        | ExpExp
        ;

ExpExp:      NegExp '^' ExpExp                                               [* %% = this.createNode('node_op', 'op_exp', %1, %3 ); *]
        | NegExp
        ;
                
NegExp:        '-' ExtValue                                                  [* %% = this.createNode('node_op', 'op_neg', %2 ); *]
        | ExtValue
        ;

ExtValue:      ExtValue '[' AddSubExp ']'                                    [* %% = this.createNode('node_op', 'op_extvalue', %1, %3); *]
        | ExtValue '(' Param_List ')'                                        [* %% = this.createNode('node_op', 'op_execfun', %1, %3); *]
        | ExtValue '(' Param_List ')' '<<' Prop_List '>>'                    [* %% = this.createNode('node_op', 'op_execfun', %1, %3, %6); *]
        | ExtValue '.' Identifier                                            [* %% = this.createNode('node_op', 'op_property', %1, %3); *]
        | Value
        ;

Value:        Integer                                                        [* %% = this.createNode('node_const', %1 ); *]
        | Float                                                              [* %% = this.createNode('node_const', %1 ); *]
        | Identifier                                                         [* %% = this.createNode('node_var', %1 ); *]
        | '(' Expression ')'                                                 [* %% = %2; *]
        | String                                                             [* %% = this.createNode('node_str', %1); *]
        | FUNCTION '(' Param_Def_List ')' '{' Stmt_List '}'                  [* %% = this.createNode('node_op', 'op_function', %3, %6); *]
        | '<<' Prop_List '>>'                                                [* %% = this.createNode('node_op', 'op_proplst_val', %2); *]
        | '[' Param_List ']'                                                 [* %% = this.createNode('node_op', 'op_array', %2); *]
        | TRUE                                                               [* %% = this.createNode('node_const_bool', %1 ); *]
        | FALSE                                                              [* %% = this.createNode('node_const_bool', %1 ); *]
        ;

